/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MlmMatrix } from "./MlmMatrix";
import { MlmMatrixCountArgs } from "./MlmMatrixCountArgs";
import { MlmMatrixFindManyArgs } from "./MlmMatrixFindManyArgs";
import { MlmMatrixFindUniqueArgs } from "./MlmMatrixFindUniqueArgs";
import { CreateMlmMatrixArgs } from "./CreateMlmMatrixArgs";
import { UpdateMlmMatrixArgs } from "./UpdateMlmMatrixArgs";
import { DeleteMlmMatrixArgs } from "./DeleteMlmMatrixArgs";
import { User } from "../../user/base/User";
import { MlmMatrixService } from "../mlmMatrix.service";
@graphql.Resolver(() => MlmMatrix)
export class MlmMatrixResolverBase {
  constructor(protected readonly service: MlmMatrixService) {}

  async _mlmMatricesMeta(
    @graphql.Args() args: MlmMatrixCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MlmMatrix])
  async mlmMatrices(
    @graphql.Args() args: MlmMatrixFindManyArgs
  ): Promise<MlmMatrix[]> {
    return this.service.mlmMatrices(args);
  }

  @graphql.Query(() => MlmMatrix, { nullable: true })
  async mlmMatrix(
    @graphql.Args() args: MlmMatrixFindUniqueArgs
  ): Promise<MlmMatrix | null> {
    const result = await this.service.mlmMatrix(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MlmMatrix)
  async createMlmMatrix(
    @graphql.Args() args: CreateMlmMatrixArgs
  ): Promise<MlmMatrix> {
    return await this.service.createMlmMatrix({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MlmMatrix)
  async updateMlmMatrix(
    @graphql.Args() args: UpdateMlmMatrixArgs
  ): Promise<MlmMatrix | null> {
    try {
      return await this.service.updateMlmMatrix({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MlmMatrix)
  async deleteMlmMatrix(
    @graphql.Args() args: DeleteMlmMatrixArgs
  ): Promise<MlmMatrix | null> {
    try {
      return await this.service.deleteMlmMatrix(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: MlmMatrix): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
