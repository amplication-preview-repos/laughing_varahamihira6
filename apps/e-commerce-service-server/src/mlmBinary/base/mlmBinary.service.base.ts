/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MlmBinary as PrismaMlmBinary,
  User as PrismaUser,
} from "@prisma/client";

export class MlmBinaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MlmBinaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mlmBinary.count(args);
  }

  async mlmBinaries<T extends Prisma.MlmBinaryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlmBinaryFindManyArgs>
  ): Promise<PrismaMlmBinary[]> {
    return this.prisma.mlmBinary.findMany<Prisma.MlmBinaryFindManyArgs>(args);
  }
  async mlmBinary<T extends Prisma.MlmBinaryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlmBinaryFindUniqueArgs>
  ): Promise<PrismaMlmBinary | null> {
    return this.prisma.mlmBinary.findUnique(args);
  }
  async createMlmBinary<T extends Prisma.MlmBinaryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlmBinaryCreateArgs>
  ): Promise<PrismaMlmBinary> {
    return this.prisma.mlmBinary.create<T>(args);
  }
  async updateMlmBinary<T extends Prisma.MlmBinaryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlmBinaryUpdateArgs>
  ): Promise<PrismaMlmBinary> {
    return this.prisma.mlmBinary.update<T>(args);
  }
  async deleteMlmBinary<T extends Prisma.MlmBinaryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MlmBinaryDeleteArgs>
  ): Promise<PrismaMlmBinary> {
    return this.prisma.mlmBinary.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.mlmBinary
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
